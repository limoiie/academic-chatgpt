datasource db {
  provider = "sqlite"
  url      = "file:../../dev.db"
}

generator client {
  // Corresponds to the cargo alias created earlier
  provider = "cargo prisma"
  // The location to generate the client. Is relative to the position of the schema
  output   = "../src/prisma.rs"
}

model DocumentChunk {
  document  Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  splitting Splitting @relation(fields: [splittingId], references: [id], onDelete: Cascade)
  no        Int
  content   String
  meta      String
  md5Hash   String

  documentId  Int
  splittingId Int

  @@id([documentId, splittingId, no])
}

model Splitting {
  id           Int @id @default(autoincrement())
  chunkSize    Int
  chunkOverlap Int

  documents      SplittingsOnDocuments[]
  documentChunks DocumentChunk[]
  indexes        IndexProfile[]

  @@unique([chunkOverlap, chunkSize])
}

model SplittingsOnDocuments {
  splitting Splitting @relation(fields: [splittingId], references: [id], onDelete: Cascade)
  document  Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  splittingId Int
  documentId  Int

  @@id([splittingId, documentId])
}

model Document {
  id         Int      @id @default(autoincrement())
  filename   String
  filepath   String
  md5Hash    String
  updateTime DateTime

  collections    CollectionsOnDocuments[]
  splitings      SplittingsOnDocuments[]
  documentChunks DocumentChunk[]
  indexes        CollectionIndexOnDocument[]
}

model Collection {
  id   Int    @id @default(autoincrement())
  name String

  documents CollectionsOnDocuments[]
  indexes   CollectionIndex[]
}

model CollectionsOnDocuments {
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  document   Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)

  collectionId Int
  documentId   Int

  @@id([collectionId, documentId])
}

model EmbeddingsClient {
  id   Int    @id @default(autoincrement())
  name String
  type String
  info String

  indexes IndexProfile[]

  @@unique([type, info])
}

model EmbeddingsConfig {
  id         Int    @id @default(autoincrement())
  name       String
  clientType String
  meta       String

  vectorsOnChunks EmbeddingVectorsOnDocumentChunks[]
  indexes         IndexProfile[]
}

model EmbeddingVectorsOnDocumentChunks {
  md5Hash          String
  embeddingsConfig EmbeddingsConfig @relation(fields: [embeddingsConfigId], references: [id])
  vector           Bytes

  embeddingsConfigId Int

  @@id([embeddingsConfigId, md5Hash])
}

model VectorDbClient {
  id   Int    @id @default(autoincrement())
  name String
  type String
  info String

  indexes IndexProfile[]

  @@unique([type, info])
}

model VectorDbConfig {
  id         Int    @id @default(autoincrement())
  name       String
  clientType String
  meta       String

  indexes IndexProfile[]
}

model IndexProfile {
  id               Int              @id @default(autoincrement())
  name             String
  splitting        Splitting        @relation(fields: [splittingId], references: [id])
  embeddingsClient EmbeddingsClient @relation(fields: [embeddingsClientId], references: [id])
  embeddingsConfig EmbeddingsConfig @relation(fields: [embeddingsConfigId], references: [id])
  vectorDbClient   VectorDbClient   @relation(fields: [vectorDbClientId], references: [id])
  vectorDbConfig   VectorDbConfig   @relation(fields: [vectorDbConfigId], references: [id])

  splittingId        Int
  embeddingsClientId Int
  embeddingsConfigId Int
  vectorDbClientId   Int
  vectorDbConfigId   Int

  indexes CollectionIndex[]
}

model CollectionIndex {
  id         String       @id @default(uuid())
  name       String
  collection Collection   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  index      IndexProfile @relation(fields: [indexId], references: [id], onDelete: Cascade)

  collectionId Int
  indexId      Int

  sessions         Session[]
  indexedDocuments CollectionIndexOnDocument[]

  @@unique([collectionId, name])
}

model CollectionIndexOnDocument {
  id       Int             @id @default(autoincrement())
  index    CollectionIndex @relation(fields: [indexId], references: [id], onDelete: Cascade)
  document Document        @relation(fields: [documentId], references: [id], onDelete: Cascade)

  indexId    String
  documentId Int

  @@unique([indexId, documentId])
}

model Session {
  id      Int             @id @default(autoincrement())
  name    String
  index   CollectionIndex @relation(fields: [indexId], references: [id], onDelete: Cascade)
  history String

  indexId String
}
